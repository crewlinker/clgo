// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: clconnect/v1/rpc.proto

package clconnectv1connect

import (
	connect "connectrpc.com/connect"
	v1 "github.com/crewlinker/clgo/clconnect/v1"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReadOnlyServiceName is the fully-qualified name of the ReadOnlyService service.
	ReadOnlyServiceName = "clconnect.v1.ReadOnlyService"
	// ReadWriteServiceName is the fully-qualified name of the ReadWriteService service.
	ReadWriteServiceName = "clconnect.v1.ReadWriteService"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	readOnlyServiceServiceDescriptor  = v1.File_clconnect_v1_rpc_proto.Services().ByName("ReadOnlyService")
	readWriteServiceServiceDescriptor = v1.File_clconnect_v1_rpc_proto.Services().ByName("ReadWriteService")
)

// ReadOnlyServiceClient is a client for the clconnect.v1.ReadOnlyService service.
type ReadOnlyServiceClient interface {
}

// NewReadOnlyServiceClient constructs a client for the clconnect.v1.ReadOnlyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReadOnlyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReadOnlyServiceClient {
	return &readOnlyServiceClient{}
}

// readOnlyServiceClient implements ReadOnlyServiceClient.
type readOnlyServiceClient struct {
}

// ReadOnlyServiceHandler is an implementation of the clconnect.v1.ReadOnlyService service.
type ReadOnlyServiceHandler interface {
}

// NewReadOnlyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReadOnlyServiceHandler(svc ReadOnlyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/clconnect.v1.ReadOnlyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReadOnlyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReadOnlyServiceHandler struct{}

// ReadWriteServiceClient is a client for the clconnect.v1.ReadWriteService service.
type ReadWriteServiceClient interface {
}

// NewReadWriteServiceClient constructs a client for the clconnect.v1.ReadWriteService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReadWriteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReadWriteServiceClient {
	return &readWriteServiceClient{}
}

// readWriteServiceClient implements ReadWriteServiceClient.
type readWriteServiceClient struct {
}

// ReadWriteServiceHandler is an implementation of the clconnect.v1.ReadWriteService service.
type ReadWriteServiceHandler interface {
}

// NewReadWriteServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReadWriteServiceHandler(svc ReadWriteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/clconnect.v1.ReadWriteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReadWriteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReadWriteServiceHandler struct{}
