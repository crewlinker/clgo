// Code generated by mockery v2.36.1. DO NOT EDIT.

package clory_test

import (
	client "github.com/ory/client-go"

	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockPermissionAPI is an autogenerated mock type for the PermissionAPI type
type MockPermissionAPI struct {
	mock.Mock
}

type MockPermissionAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionAPI) EXPECT() *MockPermissionAPI_Expecter {
	return &MockPermissionAPI_Expecter{mock: &_m.Mock}
}

// CheckPermission provides a mock function with given fields: ctx
func (_m *MockPermissionAPI) CheckPermission(ctx context.Context) client.PermissionAPICheckPermissionRequest {
	ret := _m.Called(ctx)

	var r0 client.PermissionAPICheckPermissionRequest
	if rf, ok := ret.Get(0).(func(context.Context) client.PermissionAPICheckPermissionRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(client.PermissionAPICheckPermissionRequest)
	}

	return r0
}

// MockPermissionAPI_CheckPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPermission'
type MockPermissionAPI_CheckPermission_Call struct {
	*mock.Call
}

// CheckPermission is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPermissionAPI_Expecter) CheckPermission(ctx interface{}) *MockPermissionAPI_CheckPermission_Call {
	return &MockPermissionAPI_CheckPermission_Call{Call: _e.mock.On("CheckPermission", ctx)}
}

func (_c *MockPermissionAPI_CheckPermission_Call) Run(run func(ctx context.Context)) *MockPermissionAPI_CheckPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPermissionAPI_CheckPermission_Call) Return(_a0 client.PermissionAPICheckPermissionRequest) *MockPermissionAPI_CheckPermission_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionAPI_CheckPermission_Call) RunAndReturn(run func(context.Context) client.PermissionAPICheckPermissionRequest) *MockPermissionAPI_CheckPermission_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPermissionExecute provides a mock function with given fields: r
func (_m *MockPermissionAPI) CheckPermissionExecute(r client.PermissionAPICheckPermissionRequest) (*client.CheckPermissionResult, *http.Response, error) {
	ret := _m.Called(r)

	var r0 *client.CheckPermissionResult
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(client.PermissionAPICheckPermissionRequest) (*client.CheckPermissionResult, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.PermissionAPICheckPermissionRequest) *client.CheckPermissionResult); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.CheckPermissionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(client.PermissionAPICheckPermissionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(client.PermissionAPICheckPermissionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPermissionAPI_CheckPermissionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPermissionExecute'
type MockPermissionAPI_CheckPermissionExecute_Call struct {
	*mock.Call
}

// CheckPermissionExecute is a helper method to define mock.On call
//   - r client.PermissionAPICheckPermissionRequest
func (_e *MockPermissionAPI_Expecter) CheckPermissionExecute(r interface{}) *MockPermissionAPI_CheckPermissionExecute_Call {
	return &MockPermissionAPI_CheckPermissionExecute_Call{Call: _e.mock.On("CheckPermissionExecute", r)}
}

func (_c *MockPermissionAPI_CheckPermissionExecute_Call) Run(run func(r client.PermissionAPICheckPermissionRequest)) *MockPermissionAPI_CheckPermissionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.PermissionAPICheckPermissionRequest))
	})
	return _c
}

func (_c *MockPermissionAPI_CheckPermissionExecute_Call) Return(_a0 *client.CheckPermissionResult, _a1 *http.Response, _a2 error) *MockPermissionAPI_CheckPermissionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPermissionAPI_CheckPermissionExecute_Call) RunAndReturn(run func(client.PermissionAPICheckPermissionRequest) (*client.CheckPermissionResult, *http.Response, error)) *MockPermissionAPI_CheckPermissionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPermissionAPI creates a new instance of MockPermissionAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionAPI {
	mock := &MockPermissionAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
